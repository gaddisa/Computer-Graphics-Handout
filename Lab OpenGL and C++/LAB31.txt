//programmed by Gaddisa Olani, UTM, 20015

/* This program to draw points with OpenGL */
#include<GL/glut.h>
void init(void)
{
glClearColor(0.0,0.0,0.0,0.0); //clear background color to back

//set up the standard orthogonal view
//This is a defult view and these statements could be removed
glMatrixMode(GL_PROJECTION);
gluOrtho2D(-1.0,1.0,-1.0,1.0);
}
void displayPoints(void)
{
//clear window
glClear(GL_COLOR_BUFFER_BIT);
glPointSize(7.0);
glBegin(GL_POINTS);
glColor3f(1.0,1.0,1.0);
glVertex2f(-0.5,-0.5);
glColor3f(1.0,0.0,0.0);
glVertex2f(-0.5,0.5);
glColor3f(0.0,0.0,1.0);
glVertex2f(0.5,0.5);
glColor3f(0.0,1.0,0.0);
glVertex2f(0.5,-0.5);
glEnd();
glFlush();
}
int main()
{

glutInitWindowPosition(50,50); //start the display-window from the upper-left corner
glutInitWindowSize(500,500); //set the width and height for the display window
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); //initialize the display mode
glutCreateWindow("Test Points"); //create the display-window with the specific title
init(); //initialize OpenGL
glutDisplayFunc(displayPoints); //call graphics to be displayed
glutMainLoop(); //display everything and wait
}



2.


#include<GL/glut.h>
#include <stdlib.h>
#include<math.h>
GLint round (GLfloat a) 
{return GLint (a+0.5);
}
void init(void)
{
//set display-window background color to white
glClearColor(1.0,1.0,1.0,1.0);
//set projection paramaters
glMatrixMode(GL_PROJECTION);
gluOrtho2D(0.0,300.0,0.0,300.0);
}
void setPixel(GLint xCoordinate, GLint yCoordinate)
{
glBegin(GL_POINTS);
glVertex2i(xCoordinate,yCoordinate);
glEnd();
glFlush(); //executes all OpenGL functions as quickly as possible
}
void lineDDA(GLint x0, GLint y0, GLint xEnd, GLint yEnd)
{
GLint dx = xEnd - x0;
GLint dy = yEnd - y0;
GLint steps, k;
GLfloat xIncrement, yIncrement, x=x0, y=y0;
if(abs(dx) > abs(dy))
steps = abs(dx);
else
steps = abs(dy);
xIncrement = GLfloat (dx) / GLfloat (steps);
yIncrement = GLfloat (dy) / GLfloat (steps);
setPixel(round (x), round(y));
for(k=0; k<steps; k++)
{
x += xIncrement;
y += yIncrement;
setPixel(round(x) , round(y));
}
}
void drawMyLine(void)
{
glClear(GL_COLOR_BUFFER_BIT);
glColor3f(1.0,0.0,0.0);
glPointSize(4.0);
GLint x0 = 100;
GLint y0 = 100;
GLint xEnd = 200;
GLint yEnd = 200;
lineDDA(x0,y0,xEnd,yEnd);
}
int main()
{
//initialize GLUT
//glutInit(&argc,argv);
//initialize display mode
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
//set display-window width & height
glutInitWindowSize(500,500);
//set display-window upper-left position
glutInitWindowPosition(50,50);
//create display-window with a title
glutCreateWindow("Digital Differential Analyzer Algorithm");
//initialze OpenGL
init();
//call graphics to be displayed on the window
glutDisplayFunc(drawMyLine);
//display everything and wait
glutMainLoop();
}

3.

/* This program to draw  A TRIANGLE  with OpenGL */
#include<GL/glut.h>
void init(void)
{
glClearColor(0.0,0.0,0.0,0.0); //clear background color to back

//set up the standard orthogonal view
//This is a defult view and these statements could be removed
glMatrixMode(GL_PROJECTION);
gluOrtho2D(-1.0,1.0,-1.0,1.0);
}
void displayPoints(void)
{
//clear window
glClear(GL_COLOR_BUFFER_BIT);
glPointSize(7.0);
glBegin(GL_TRIANGLES);
glColor3f(1.0,1.0,1.0);
glVertex2f(-0.5,-0.5);
glColor3f(1.0,0.0,0.0);
glVertex2f(-0.5,0.5);
glColor3f(0.0,0.0,1.0);
glVertex2f(0.5,0.5);
glEnd();
glFlush();
}
int main()
{

glutInitWindowPosition(50,50); //start the display-window from the upper-left corner
glutInitWindowSize(800,500); //set the width and height for the display window
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); //initialize the display mode
glutCreateWindow("Test Points"); //create the display-window with the specific title
init(); //initialize OpenGL
glutDisplayFunc(displayPoints); //call graphics to be displayed
glutMainLoop(); //display everything and wait
}